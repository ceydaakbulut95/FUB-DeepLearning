import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D

with np.load('C:\\Users\\Ceyda Akbulut\\Desktop\\prediction-challenge-01-data.npz') as fh:

    data_x = fh['data_x']
    data_y = fh['data_y']
    test_x = fh['test_x']
    
    

image_index = 7777 
print(data_y[image_index]) # The label is 8
data_x = data_x.reshape(data_x.shape[0], 28, 28, 1)
test_x = test_x.reshape(test_x.shape[0], 28, 28, 1)

input_shape = (28, 28, 1)

data_x = data_x.astype('float32')
test_x = test_x.astype('float32')

data_x /= 255
test_x /= 255

print('x_train shape:', data_x.shape)
print('Number of images in x_train', data_x.shape[0])
print('Number of images in x_test', test_x.shape[0])

# Creating a Sequential Model and adding the layers
model = Sequential()
model.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten()) # Flattening the 2D arrays for fully connected layers
model.add(Dense(128, activation=tf.nn.relu))
model.add(Dropout(0.2))
model.add(Dense(10,activation=tf.nn.softmax))

model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy', 
              metrics=['accuracy'])
model.fit(x=data_x,y=data_y,epochs=10)
model.evaluate(test_x,test_y)
